@article{Smans:2012:IDF:2160910.2160911,
 author = {Smans, Jan and Jacobs, Bart and Piessens, Frank},
 title = {Implicit Dynamic Frames},
 journal = {ACM Trans. Program. Lang. Syst.},
 issue_date = {April 2012},
 volume = {34},
 number = {1},
 month = may,
 year = {2012},
 issn = {0164-0925},
 pages = {2:1--2:58},
 articleno = {2},
 numpages = {58},
 url = {http://doi.acm.org/10.1145/2160910.2160911},
 doi = {10.1145/2160910.2160911},
 acmid = {2160911},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {Program verification, frame problem, separation logic},
} 

@article{leino2000esc,
    title={ESC/Java user's manual},
    author={Leino, K Rustan M and Nelson, Greg and Saxe, James B},
    journal={ESC},
    volume={2000},
    pages={002},
    year={2000}
}

@inproceedings{nelson2004extended,
    title={Extended static checking for java},
    author={Nelson, Greg},
    booktitle={International Conference on Mathematics of Program Construction},
    pages={1--1},
    year={2004},
    organization={Springer}
}

@inproceedings{jacobs2001logic,
    title={A logic for the Java Modeling Language JML},
    author={Jacobs, Bart and Poll, Erik},
    booktitle={International Conference on Fundamental Approaches to Software Engineering},
    pages={284--299},
    year={2001},
    organization={Springer}
}

@article{cheon2002runtime,
    title={A runtime assertion checker for the Java Modeling Language (JML)},
    author={Cheon, Yoonsik and Leavens, Gary T},
    year={2002}
}

@inproceedings{the-spec-programming-system-an-overview,
    author = {Mike Barnett, Rustan Leino, Wolfram Schulte},
    title = {The Spec# Programming System: An Overview},
    booktitle = {CASSIS 2004, Construction and Analysis of Safe, Secure and Interoperable Smart devices},
    year = {2005},
    month = {January},
    abstract = {The Spec# programming system is a new attempt at a more cost effective way to develop and maintain high-quality software. This paper describes the goals and architecture of the Spec# programming system, consisting of the object-oriented Spec# programming language, the Spec# compiler, and the Boogie static program verifier. The language includes constructs for writing specifications that capture programmer intentions about how methods and data are to be used, the compiler emits run-time checks to enforce these specifications, and the verifier can check the consistency between a program and its specifications.
    },
    publisher = {Springer},
    url = {https://www.microsoft.com/en-us/research/publication/the-spec-programming-system-an-overview/},
    address = {},
    pages = {49-69},
    journal = {},
    volume = {3362},
    chapter = {},
    isbn = {},
}

@inproceedings{a-statically-verifiable-programming-model-for-concurrent-object-oriented-programs,
    author = {Bart Jacobs, Jan Smans, Frank Piessens, Wolfram Schulte},
    title = {A Statically Verifiable Programming Model for Concurrent Object-Oriented Programs},
    booktitle = {ICFEM},
    year = {2006},
    month = {January},
    publisher = {Springer},
    url = {https://www.microsoft.com/en-us/research/publication/a-statically-verifiable-programming-model-for-concurrent-object-oriented-programs/},
    address = {},
    pages = {420-439},
    journal = {},
    volume = {4260},
    chapter = {},
    isbn = {3-540-47460-9},
}

@inproceedings{embedded-contract-languages,
    author = {Manuel Fahndrich, Mike Barnett, Francesco Logozzo},
    title = {Embedded Contract Languages},
    booktitle = {ACM SAC - OOPS},
    year = {2010},
    month = {March},
    abstract = {
    
    Specifying application interfaces (APIs) with information that goes beyond method argument and return types is a long-standing quest of programming language researchers and practitioners. The number of type system extensions or specification languages is roughly equal to the number of tools that consume them. In other words, every tool comes with its own specification language. In this paper we argue that for modern object-oriented languages, using an embedding of contracts as code is a better approach. We exemplify our embedding of Code Contracts on the Microsoft managed execution platform (.NET) using the C# programming language. The embedding works as well in Visual Basic. We discuss the numerous advantages of our approach and the technical challenges, as well as the status of tools that consume the embedded contracts
    
    
    },
    publisher = {Association for Computing Machinery, Inc.},
    url = {https://www.microsoft.com/en-us/research/publication/embedded-contract-languages/},
    address = {},
    pages = {},
    journal = {},
    volume = {},
    chapter = {},
    isbn = {},
}

