% IDF, Chalice, ...
@inproceedings{smans2009implicit,
    title={Implicit dynamic frames: Combining dynamic frames and separation logic},
    author={Smans, Jan and Jacobs, Bart and Piessens, Frank},
    booktitle={European Conference on Object-Oriented Programming},
    pages={148--172},
    year={2009},
    organization={Springer}
}

@inproceedings{parkinson2011relationship,
    title={The relationship between separation logic and implicit dynamic frames},
    author={Parkinson, Matthew J and Summers, Alexander J},
    booktitle={European Symposium on Programming},
    pages={439--458},
    year={2011},
    organization={Springer}
}

@incollection{leino2009verification,
    title={Verification of concurrent programs with Chalice},
    author={Leino, K Rustan M and M{\"u}ller, Peter and Smans, Jan},
    booktitle={Foundations of Security Analysis and Design V},
    pages={195--222},
    year={2009},
    publisher={Springer}
}

@inproceedings{summers2013formal,
    title={A formal semantics for isorecursive and equirecursive state abstractions},
    author={Summers, Alexander J and Drossopoulou, Sophia},
    booktitle={European Conference on Object-Oriented Programming},
    pages={129--153},
    year={2013},
    organization={Springer}
}

% AGT
@inproceedings{siek2006gradual,
    title={Gradual typing for functional languages},
    author={Siek, Jeremy G and Taha, Walid},
    booktitle={Scheme and Functional Programming Workshop},
    volume={6},
    pages={81--92},
    year={2006}
}

@inproceedings{siek2015refined,
    title={Refined criteria for gradual typing},
    author={Siek, Jeremy G and Vitousek, Michael M and Cimini, Matteo and Boyland, John Tang},
    booktitle={LIPIcs-Leibniz International Proceedings in Informatics},
    volume={32},
    year={2015},
    organization={Schloss Dagstuhl-Leibniz-Zentrum fuer Informatik}
}

@article{garcia2016abstracting,
    title={Abstracting gradual typing},
    author={Garcia, Ronald and Clark, Alison M and Tanter, {\'E}ric},
    journal={ACM SIGPLAN Notices},
    volume={51},
    number={1},
    pages={429--442},
    year={2016},
    publisher={ACM}
}

@article{garcia2015deriving,
    title={Deriving a Simple Gradual Security Language},
    author={Garcia, Ronald and Tanter, Eric},
    journal={arXiv preprint arXiv:1511.01399},
    year={2015}
}

@inproceedings{wolff2011gradual,
    title={Gradual typestate},
    author={Wolff, Roger and Garcia, Ronald and Tanter, {\'E}ric and Aldrich, Jonathan},
    booktitle={European Conference on Object-Oriented Programming},
    pages={459--483},
    year={2011},
    organization={Springer}
}

@inproceedings{banados2014theory,
    title={A theory of gradual effect systems},
    author={Ba{\~n}ados Schwerter, Felipe and Garcia, Ronald and Tanter, {\'E}ric},
    booktitle={ACM SIGPLAN Notices},
    volume={49},
    number={9},
    pages={283--295},
    year={2014},
    organization={ACM}
}

@inproceedings{toro2015customizable,
    title={Customizable gradual polymorphic effects for Scala},
    author={Toro, Mat{\'\i}as and Tanter, Eric},
    booktitle={ACM SIGPLAN Notices},
    volume={50},
    number={10},
    pages={935--953},
    year={2015},
    organization={ACM}
}

% practice
@inproceedings{arlt2014gradual,
    title={The gradual verifier},
    author={Arlt, Stephan and Rubio-Gonz{\'a}lez, Cindy and R{\"u}mmer, Philipp and Sch{\"a}f, Martin and Shankar, Natarajan},
    booktitle={NASA Formal Methods Symposium},
    pages={313--327},
    year={2014},
    organization={Springer}
}

@book{meyer2002design,
    title={Design by contract},
    author={Meyer, Bertrand},
    year={2002},
    publisher={Prentice Hall}
}

@article{leino2000esc,
    title={ESC/Java user's manual},
    author={Leino, K Rustan M and Nelson, Greg and Saxe, James B},
    journal={ESC},
    volume={2000},
    pages={002},
    year={2000}
}

@inproceedings{nelson2004extended,
    title={Extended static checking for java},
    author={Nelson, Greg},
    booktitle={International Conference on Mathematics of Program Construction},
    pages={1--1},
    year={2004},
    organization={Springer}
}

@inproceedings{jacobs2001logic,
    title={A logic for the Java Modeling Language JML},
    author={Jacobs, Bart and Poll, Erik},
    booktitle={International Conference on Fundamental Approaches to Software Engineering},
    pages={284--299},
    year={2001},
    organization={Springer}
}

@article{cheon2002runtime,
    title={A runtime assertion checker for the Java Modeling Language (JML)},
    author={Cheon, Yoonsik and Leavens, Gary T},
    year={2002}
}

@inproceedings{sarcar2010new,
    title={A new Eclipse-based JML compiler built using AST merging},
    author={Sarcar, Amritam and Cheon, Yoonsik},
    booktitle={Software Engineering (WCSE), 2010 Second World Congress on},
    volume={2},
    pages={287--292},
    year={2010},
    organization={IEEE}
}

@inproceedings{the-spec-programming-system-an-overview,
    author = {Mike Barnett, Rustan Leino, Wolfram Schulte},
    title = {The Spec\# Programming System: An Overview},
    booktitle = {CASSIS 2004, Construction and Analysis of Safe, Secure and Interoperable Smart devices},
    year = {2005},
    month = {January},
    abstract = {The SpecSharp programming system is a new attempt at a more cost effective way to develop and maintain high-quality software. This paper describes the goals and architecture of the Spec# programming system, consisting of the object-oriented Spec# programming language, the Spec# compiler, and the Boogie static program verifier. The language includes constructs for writing specifications that capture programmer intentions about how methods and data are to be used, the compiler emits run-time checks to enforce these specifications, and the verifier can check the consistency between a program and its specifications.
    },
    publisher = {Springer},
    url = {https://www.microsoft.com/en-us/research/publication/the-spec-programming-system-an-overview/},
    address = {},
    pages = {49-69},
    journal = {},
    volume = {3362},
    chapter = {},
    isbn = {},
}

@inproceedings{a-statically-verifiable-programming-model-for-concurrent-object-oriented-programs,
    author = {Bart Jacobs, Jan Smans, Frank Piessens, Wolfram Schulte},
    title = {A Statically Verifiable Programming Model for Concurrent Object-Oriented Programs},
    booktitle = {ICFEM},
    year = {2006},
    month = {January},
    publisher = {Springer},
    url = {https://www.microsoft.com/en-us/research/publication/a-statically-verifiable-programming-model-for-concurrent-object-oriented-programs/},
    address = {},
    pages = {420-439},
    journal = {},
    volume = {4260},
    chapter = {},
    isbn = {3-540-47460-9},
}

@inproceedings{embedded-contract-languages,
    author = {Manuel Fahndrich, Mike Barnett, Francesco Logozzo},
    title = {Embedded Contract Languages},
    booktitle = {ACM SAC - OOPS},
    year = {2010},
    month = {March},
    abstract = {
    
    Specifying application interfaces (APIs) with information that goes beyond method argument and return types is a long-standing quest of programming language researchers and practitioners. The number of type system extensions or specification languages is roughly equal to the number of tools that consume them. In other words, every tool comes with its own specification language. In this paper we argue that for modern object-oriented languages, using an embedding of contracts as code is a better approach. We exemplify our embedding of Code Contracts on the Microsoft managed execution platform (.NET) using the C# programming language. The embedding works as well in Visual Basic. We discuss the numerous advantages of our approach and the technical challenges, as well as the status of tools that consume the embedded contracts
    
    
    },
    publisher = {Association for Computing Machinery, Inc.},
    url = {https://www.microsoft.com/en-us/research/publication/embedded-contract-languages/},
    address = {},
    pages = {},
    journal = {},
    volume = {},
    chapter = {},
    isbn = {},
}

@incollection{crocker2004safe,
    title={Safe object-oriented software: the verified design-by-contract paradigm},
    author={Crocker, David},
    booktitle={Practical Elements of Safety},
    pages={19--41},
    year={2004},
    publisher={Springer}
}


@inproceedings{ChristakisMuellerWuestholz16,
    author = {M. Christakis and P. M{\"u}ller and V. W{\"u}stholz},
    title = {Guiding Dynamic Symbolic Execution toward Unverified Program Executions},
    booktitle = {International Conference on Software Engineering (ICSE)},
    editor = {L. K. Dillon and W. Visser and L. Williams},
    year = {2016},
    pages = {144--155},
    publisher = {ACM}
}


% hoare
@article{hoare1969axiomatic,
    title={An axiomatic basis for computer programming},
    author={Hoare, Charles Antony Richard},
    journal={Communications of the ACM},
    volume={12},
    number={10},
    pages={576--580},
    year={1969},
    publisher={ACM}
}